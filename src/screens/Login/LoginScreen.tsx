// src/screens/Auth/LoginScreen.tsx - Login screen with FCM token registration
import React, { useState, useEffect } from "react";
import { View, Text, StatusBar, TouchableOpacity, Image, InteractionManager, Alert } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Colors } from "../../constants/colors";
import ConfirmButton from "../../components/ConfirmButton";
import TextInputComponent from "../../components/TextInput/TextInput";
import Header from "../../components/Header";
import { styles } from "./styles";
import { useNavigation } from "@react-navigation/native";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import { useLoginCustomerMutation, useLoginEmployeeMutation } from "../../services";
import { useAppDispatch } from "../../redux/hooks/useAppDispatch";
import { setLoggedIn } from "../../redux/slices/authSlice";
import { setCurrentEmployee } from "../../redux/slices/employeeSlice";
import { AuthStackParamList } from "../../navigation/AuthNavigator";
import { registerFCMTokenAfterLogin } from "../../utils/fcmTokenManager";

type NavigationProp = NativeStackNavigationProp<AuthStackParamList>;

export default function LoginScreen() {
  const navigation = useNavigation<NavigationProp>();
  const dispatch = useAppDispatch();
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isCustomerMode, setIsCustomerMode] = useState(true); // Default customer
  const [ready, setReady] = useState(false);

  const [loginCustomer] = useLoginCustomerMutation();
  const [loginEmployee] = useLoginEmployeeMutation();

  useEffect(() => {
    const task = InteractionManager.runAfterInteractions(() => {
      setReady(true);
    });
    return () => task.cancel();
  }, []);

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      if (isCustomerMode) {
        // üë§ CUSTOMER LOGIN - Ch·ªâ c·∫ßn s·ªë ƒëi·ªán tho·∫°i
        if (!phone.trim()) {
          Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!");
          setIsLoading(false);
          return;
        }
        
        try {
          const result = await loginCustomer({ phone: phone.trim() }).unwrap();
          
          if (result.success && result.customer) {
            const userId = result.customer.id?.toString() || '';
            
            dispatch(setLoggedIn({ 
              isLoggedIn: true, 
              userType: 'customer', 
              userId,
              userName: result.customer?.name || 'Customer',
              userPhone: result.customer?.phone || '',
              userLicensePlate: result.customer?.license_plate || '',
              avatarUrl: result.customer?.avatar_url || '',
              userEmail: result.customer?.email || ''
            }));

            // Register FCM token in background
            registerFCMTokenAfterLogin(userId, 'customer').catch(error => {
              console.error('Failed to register FCM token:', error);
              // Don't show error to user, token will be re-registered on next app start
            });
          } else {
            Alert.alert("L·ªói", "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
          }
        } catch (error: any) {
          console.error('Customer login error:', error);
          
          // Handle specific error codes
          if (error?.status === 400) {
            // 400 Bad Request - Thi·∫øu phone (nh∆∞ng ƒë√£ check ·ªü tr√™n)
            Alert.alert(
              "Thi·∫øu th√¥ng tin",
              "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ ƒëƒÉng nh·∫≠p."
            );
          } else if (error?.status === 404) {
            // 404 Not Found - Phone ch∆∞a ƒëƒÉng k√Ω
            Alert.alert(
              "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i",
              "S·ªë ƒëi·ªán tho·∫°i n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω. Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.",
              [
                { text: "ƒê√≥ng", style: "cancel" },
                { 
                  text: "ƒêƒÉng k√Ω ngay", 
                  onPress: () => navigation.navigate("Register")
                }
              ]
            );
          } else if (error?.status === 500) {
            // 500 Internal Server Error
            Alert.alert(
              "L·ªói h·ªá th·ªëng",
              "C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
          } else {
            // Unknown error
            Alert.alert(
              "L·ªói k·∫øt n·ªëi",
              error?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
            );
          }
        }
      } else {
        // üë∑ EMPLOYEE LOGIN - Y√™u c·∫ßu phone + password
        if (!phone.trim() || !password.trim()) {
          Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u!");
          setIsLoading(false);
          return;
        }
        
        try {
          const result = await loginEmployee({ phone: phone.trim(), password: password.trim() }).unwrap();
          
          if (result.success && result.employee) {
            const userId = result.employee.id.toString();
            
            dispatch(setLoggedIn({ 
              isLoggedIn: true, 
              userType: 'employee', 
              userId,
              userName: result.employee.name || 'Employee',
              userPhone: result.employee.phone || '',
              userLicensePlate: '',
              avatarUrl: result.employee.avatar_url || ''
            }));
            dispatch(setCurrentEmployee(result.employee));

            // Register FCM token in background
            registerFCMTokenAfterLogin(userId, 'employee').catch(error => {
              console.error('Failed to register FCM token:', error);
              // Don't show error to user, token will be re-registered on next app start
            });
          } else {
            Alert.alert("L·ªói", "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
          }
        } catch (error: any) {
          console.error('Employee login error:', error);
          
          // Handle specific error codes
          if (error?.status === 400) {
            // 400 Bad Request - Thi·∫øu phone ho·∫∑c password
            Alert.alert(
              "Thi·∫øu th√¥ng tin",
              "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u."
            );
          } else if (error?.status === 401) {
            // 401 Unauthorized - Sai th√¥ng tin (phone kh√¥ng t·ªìn t·∫°i HO·∫∂C password sai)
            Alert.alert(
              "Th√¥ng tin kh√¥ng ch√≠nh x√°c",
              "S·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i.",
              [
                { text: "ƒê√≥ng", style: "cancel" }
              ]
            );
          } else if (error?.status === 500) {
            // 500 Internal Server Error
            Alert.alert(
              "L·ªói h·ªá th·ªëng",
              "C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau."
            );
          } else {
            // Unknown error
            Alert.alert(
              "L·ªói k·∫øt n·ªëi",
              error?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng."
            );
          }
        }
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = () => {
    navigation.navigate("Register");
  };

  const handleCustomerLogin = () => {
    setIsCustomerMode(!isCustomerMode);
    setPhone("");
    setPassword("");
  };

  return (
    <SafeAreaView style={styles.root}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.background.light} />

      <Header title="ƒêƒÉng nh·∫≠p" />

      <View style={styles.body}>
        <View style={styles.form}>
          <Text style={styles.welcomeText}>Ch√†o m·ª´ng tr·ªü l·∫°i</Text>
          <Text style={styles.subtitle}>ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c</Text>

          <Image
            style={styles.logo}
            source={require('../../assets/logo.png')}
            resizeMode="cover"
          />

          {isCustomerMode ? (
            <TextInputComponent
              value={phone}
              onChangeText={setPhone}
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              placeholderTextColor={Colors.text.placeholder}
              keyboardType="phone-pad"
            />
          ) : (
            <View style={styles.inputContainer}>
              <TextInputComponent
                value={phone}
                onChangeText={setPhone}
                placeholder="S·ªë ƒëi·ªán tho·∫°i"
                placeholderTextColor={Colors.text.placeholder}
                keyboardType="phone-pad"
              />
              <TextInputComponent
                value={password}
                onChangeText={setPassword}
                placeholder="M·∫≠t kh·∫©u"
                placeholderTextColor={Colors.text.placeholder}
                secureTextEntry={true}
              />
            </View>
          )}

          <TouchableOpacity onPress={handleCustomerLogin} style={styles.customerLink}>
            <Text style={styles.customerLinkText}>
              {isCustomerMode ? "Chuy·ªÉn sang ƒëƒÉng nh·∫≠p nh√¢n vi√™n" : "Chuy·ªÉn sang ƒëƒÉng nh·∫≠p kh√°ch h√†ng"}
            </Text>
          </TouchableOpacity>

          <ConfirmButton
            title="ƒêƒÉng nh·∫≠p"
            onPress={handleLogin}
            loading={isLoading}
            buttonColor={Colors.button.primary}
            textColor={Colors.text.inverted}
          />

          <View style={styles.signup}>
            <Text style={styles.registerPrompt}>B·∫°n ch∆∞a c√≥ t√†i kho·∫£n?</Text>
            <TouchableOpacity onPress={handleRegister}>
              <Text style={styles.registerLink}>ƒêƒÉng k√Ω</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </SafeAreaView>
  );
}